name: CI/CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build-and-lint:
    name: Build and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
          cache: "npm"

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build
        run: npm run build:dev

      - name: Lint
        run: npm run lint

      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            apps/*/dist
            apps/*/src/**/*.js
            node_modules
            apps/*/node_modules
          key: build-${{ github.sha }}

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: build-and-lint
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
          cache: "npm"

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            apps/*/dist
            apps/*/src/**/*.js
            node_modules
            apps/*/node_modules
          key: build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Run backend unit and integration tests
        run: npm run test:ci --workspace=@apps/backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: build-and-lint
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
          cache: "npm"

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            apps/*/dist
            apps/*/src/**/*.js
            node_modules
            apps/*/node_modules
          key: build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Run frontend unit tests
        run: npm run test:unit --workspace=@apps/frontend

  frontend-e2e-tests:
    name: Frontend E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-unit-tests]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
          cache: "npm"

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            apps/*/dist
            apps/*/src/**/*.js
            node_modules
            apps/*/node_modules
          key: build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Run database migrations
        run: cd apps/backend && npm run db:migrate
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('apps/frontend/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium
        working-directory: apps/frontend

      - name: Install Playwright system dependencies only
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium
        working-directory: apps/frontend

      - name: Run frontend E2E tests
        run: npm run test:e2e --workspace=@apps/frontend -- --project=chromium
        env:
          CI: true
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.sha }}
          path: apps/frontend/playwright-report/
          retention-days: 7

  deploy-backend:
    name: Deploy Backend to Fly.io
    runs-on: ubuntu-latest
    needs: [build-and-lint, backend-tests, frontend-unit-tests, frontend-e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy backend
        run: flyctl deploy -c apps/backend/fly.toml --remote-only --depot=false
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 10
          for i in {1..12}; do
            if curl -f -s https://your-backend.fly.dev/health > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              exit 0
            fi
            echo "Attempt $i/12 failed, retrying in 5s..."
            sleep 5
          done
          echo "❌ Backend health check failed"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, attempting rollback..."
          flyctl releases rollback --app your-backend-app -y
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}

  deploy-frontend:
    name: Deploy Frontend to Fly.io
    runs-on: ubuntu-latest
    needs: [build-and-lint, backend-tests, frontend-unit-tests, frontend-e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy frontend
        run: flyctl deploy -c apps/frontend/fly.toml --remote-only --depot=false
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 10
          for i in {1..12}; do
            if curl -f -s https://your-frontend.fly.dev > /dev/null 2>&1; then
              echo "✅ Frontend health check passed"
              exit 0
            fi
            echo "Attempt $i/12 failed, retrying in 5s..."
            sleep 5
          done
          echo "❌ Frontend health check failed"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, attempting rollback..."
          flyctl releases rollback --app your-frontend-app -y
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}
